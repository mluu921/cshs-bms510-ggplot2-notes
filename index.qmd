---
title: "ggplot2"
author: 
- 'Michael Luu'
- 'Marcio Diniz'
format: html
self-contained: true
date: today
toc: true
---

```{r}
#| warning: false
#| message: false

library(tidyverse)
library(patchwork)

### Reading dataset

df <- read_csv("data/emergency.csv")

### Recoding variables

df <- df %>% mutate(
  infection =
    factor(
      infection,
      levels = 0:1,
      labels = c("No", "Yes")
    ),
  gender = factor(
    gender,
    levels = 0:1,
    labels = c("Female", "Male")
  ),
  child =
    factor(child,
           levels = 0:2,
           labels = c("A", "B", "C")),
  encephalopathy =
    factor(
      encephalopathy,
      levels = 0:1,
      labels = c("No", "Yes")
    ),
  ascites =
    factor(ascites,
           levels = 0:1,
           labels = c("No", "Yes")),
  death =
    factor(death,
           levels = 0:1,
           labels = c("No", "Yes"))
)

```

# What is ggplot2 ? 

![](figures/screenshots/tidyverse.PNG)

> ggplot2 is part of the tidyverse suite of packages

> Based off of the grammar of graphics, with the idea of a standardized language used to build graphs by layers

# Building a Plot

![](figures/screenshots/ggplot_documentation.PNG)

# My First dotplot

> The actual full syntax of `ggplot()` is `ggplot(data = NULL, mapping = aes()`). R is smart enough that you don't need to specify the argument name, as it automatically treats the first object specified as `data = df` and the second argument as `mapping = aes()`. That way `ggplot(df)` is equivalent to `ggplot(data = df)`.

```{r}
ggplot(df)

```

> Doesn't look very good! It's just a blank square - Let's try mapping a variable onto the x axis within the aes() argument

## Adding a coordinate system
```{r}
ggplot(df, aes(x = age))
```

> Great! We have now mapped the variable age onto the x axis - now lets try adding some geoms such as geom_dotplot

## Adding a geom (dotplot)
```{r}
ggplot(df, aes(x = age)) + 
  geom_dotplot()
```

### Making changes to the geom layer

> Great! Our first plot - it doesn't look very pretty such as the dots being very large spanning multiple age points. Let's update the plot using some of the arguments available inside `geom_dotplot()`. I don't remember all of the available arguments, lets look up the documentation using ?geom_dotplot

![](figures/screenshots/dotplot_documentation.PNG)

> A couple things to highlight, we want to use the histodot function because we want fixed binwidth instead of the default 'dotdensity' approach, we also want to adjust binwidht to 1 indicating 1 stacked column of dots per every age 

![](figures/screenshots//dotplot_documentation2.PNG)

> Let's make those changes

```{r}
ggplot(df, aes(x = age)) + 
  geom_dotplot(method = 'histodot', binwidth = 1)
```

> Great! This is looking more like a dotplot, but it still doesn't look very pretty. It's very grey and dull, Let's spice things up with themes.

## Themes

![](figures/screenshots/ggplot2_themes.PNG)

> Some of the default themes that come from ggplot2, but there are many more that we can utilize from the ggthemes package! 

[https://cran.r-project.org/web/packages/ggthemes/vignettes/ggthemes.html](https://cran.r-project.org/web/packages/ggthemes/vignettes/ggthemes.html)

```{r}
ggplot(df, aes(x = age)) +
  geom_dotplot(binwidth = 1, method = "histodot") +
  theme_bw()
```

```{r}
ggplot(df, aes(x = age)) +
  geom_dotplot(binwidth = 1, method = "histodot") +
  theme_minimal()
```

```{r}
ggplot(df, aes(x = age)) +
  geom_dotplot(binwidth = 1, method = "histodot") +
  theme_classic()
```

### Utilizing themes from the ggthemes package

> Utilizing themes from the ggthemes package, if you dont have ggthemes then please install using `install.packages('ggthemes')` and loading up the library using `library(ggthemes)`. I've commented out `#install.packages('ggthemes')` because I already have it. The # is used as a method to make comments in your code.

#### Fivethirtyeight theme
```{r}
# install.packages('ggthemes')
library(ggthemes)

# Theme matching the popular politics/analytics website firvethirtyeight
ggplot(df, aes(x = age)) +
  geom_dotplot(binwidth = 1, method = "histodot") +
  theme_fivethirtyeight()

```

#### Wallstreet journal theme
```{r}

# Wallstreet journal
ggplot(df, aes(x = age)) +
  geom_dotplot(binwidth = 1, method = "histodot") +
  theme_wsj()
```

#### Economist theme
```{r}

# Economist
ggplot(df, aes(x = age)) +
  geom_dotplot(binwidth = 1, method = "histodot") +
  theme_economist()


```

#### Excel theme
```{r}
# Excel

ggplot(df, aes(x = age)) +
  geom_dotplot(binwidth = 1, method = "histodot") +
  theme_excel()
```

### Customizing a theme

> Lets continue on with theme_bw(), but make some customizations with the `theme()` function, by removing the ticks, the title, and the text for the y axis.

> We can do this by looking at the documentation for `theme()` using `?theme`

![](figures/screenshots/theme_documentation.PNG)

> There are ALOT of possible customizations we can make, but we will focus on the `axis.title.y`, `axis.text.y`, and the `axis.ticks.y` arguments.

> Almost all arguments in `theme()` needs to receive the information with the `element_blank()`, `element_text()`, `element_line()`, and `element_rect()` function. We will focus on `element_blank()` for now by using it to remove the information on the y axis.

```{r}
ggplot(df, aes(x = age)) +
  geom_dotplot(binwidth = 1, method = "histodot") +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank())
```


#### Adding and customizing the colors using the fill argument and the scale_fill_manual() / scale_fill_discrete() function

> Looks more like a dotplot now! But how about adding some color, by identifying the infection and non infection patients. We can do this using the `fill` argument and mapping it to the variable infection. Recall if we want to map any variables, we can only map those varaibles within the `aes()` argument.


```{r}
ggplot(df, aes(x = age, fill = infection)) +
  geom_dotplot(binwidth = 1, method = "histodot") +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank())
```

> Looks great but the x axis label 'age' doesn't look very good, lets capitalize it and fix the legend title so it'll be more 'tidy'. It doesn't look very 'publication ready', because we can do better!. We can do this by using the `labs()` function, and changing the x axis label. Since the color legend is mapped using the `fill` argument, we can make changes to the title by specifying it with the `scale_fill_discrete()` function.

#### Customizing the x axis title and the legend title

> `scale_fill_discrete()` changes the scale name of the fill function manually as well as other options (Please see the documentation for further customization details!), but we'll focus on changing the name for now. By default, it uses the variable name but in this case we want to change it to something more pleasing and consistent with the rest of the plot.

```{r}
ggplot(df, aes(x = age, fill = infection)) +
  geom_dotplot(binwidth = 1, method = "histodot")  +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +
  scale_fill_discrete("Infection") +
  labs(x = "Age")
```

> Legend title is now fixed - however what if we want to have custom colors ? We can use the `scale_fill_manual()` instead of `scale_fill_discrete()` because we want to specify the colors manually via the values argument. Let's change it to black and green to see how it looks.

#### Manually specifying colors via `scale_fill_manual()`
```{r}
ggplot(df, aes(x = age, fill = factor(infection))) +
  geom_dotplot(binwidth = 1, method = "histodot")  +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +
  scale_fill_manual("Infection", values = c('black', 'green')) +
  labs(x = "Age")
```

#### Customizing the colors using palletes

> ggplot2 has a selection of built in color palletes so you dont have to specify your own, that are 'aesthetically pleasing'

![](figures/screenshots/ggplot_pallete_colors.PNG)

Examples can be found on the ggplot2 tidyverse site
[http://ggplot2.tidyverse.org/reference/scale_brewer.html](http://ggplot2.tidyverse.org/reference/scale_brewer.html)

> We can specify the color pallete using the `scale_fill_brewer()` function. We will have to also include the updated scale name 'Infection' that way our legend title has the capitalized 'I'.

##### Set3
```{r}
ggplot(df, aes(x = age, fill = infection)) +
  geom_dotplot(binwidth = 1, method = "histodot")  +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +
  scale_fill_brewer("Infection", palette = "Set3") +
  labs(x = "Age")
```

##### Set2
```{r}
ggplot(df, aes(x = age, fill = infection)) +
  geom_dotplot(binwidth = 1, method = "histodot")  +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +
  scale_fill_brewer("Infection", palette = "Set2") +
  labs(x = "Age")
```

##### Set1
```{r}
ggplot(df, aes(x = age, fill = infection)) +
  geom_dotplot(binwidth = 1, method = "histodot")  +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +
  scale_fill_brewer("Infection", palette = "Set1") +
  labs(x = "Age")
```

> Let's choose 'Set1' as our color pallete.

> What if we don't want the dots to be stacked? We can utilize the facet option to stratify the infection and non infection patients into separate panels or 'facets'

## Utilizing 'Facets' to separate our dotplot into groups

> We can use the `facet_grid()` function, this will stratify the dotplot by a selected variable such as `infection` by it's levels such as 'Yes', and 'No'

> Lets look at the documentation again

![](figures/screenshots/facet_documentation.PNG)

> We will focus on the facets argument, which per the documentation requires a formula specifying the LHS (left hand side) and the RHS (right hand side) corresponding to rows ~ columns. A . (period) can be used as a placeholder indicating no 'facet' on that level. We can facet by columns upon the infection variable by indicating this formula `. ~ infection` in the `facet_grid()` function.

```{r}
ggplot(df, aes(x = age, fill = infection)) +
  geom_dotplot(binwidth = 1, method = "histodot")  +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +
  scale_fill_brewer("Infection", palette = "Set1") +
  labs(x = "Age") +
  facet_grid(. ~ infection)
```

> Lets try facet on the row to see how it looks. We can do this by flipping the formula by placing the variable infection on the LHS.

```{r}
ggplot(df, aes(x = age, fill = infection)) +
  geom_dotplot(stackgroups = TRUE, binwidth = 1, method = "histodot")  +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +
  scale_fill_brewer("Infection", palette = "Set1") +
  labs(x = "Age") +
  facet_grid(infection ~ .)
```

> Now that we have faceted the plot, the legend isn't very informative anymore and its redundant. Lets remove it!

## Removing the legend

> The legend argument is found within the `theme()` function with the argument `legend.position`. This argument has multiple uses, we would like to remove it.

```{r}
ggplot(df, aes(x = age, fill = infection)) +
  geom_dotplot(binwidth = 1, method = "histodot")  +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "none") +
  scale_fill_brewer("Infection", palette = "Set1") +
  labs(x = "Age") +
  facet_grid(. ~ infection)
```

> The plot is really starting to come together, but what if we want to change the scale of the x axis ? A scale/label on the x axis at every 5 years may be more informative than every 20 years.

## Changing the x axis scale

> We can do this by utilizing the `scale_x_continuous()` function. Per the documentation, one of the arguments is `breaks` which specifies the breaks in the scale and it requires a vector of numbers for the breaks. We can specify it by typing `c(15, 20, 25, ...)` but as programmers we are lazy, and can utilizing the `seq()` function which returns a vector of numbers from a specified range. `seq(0, 100, 1)` will produce a vector of numbers from 0 to 100 by 1.

```{r}
seq(0,100,1)
```

> We can use this in the breaks argument as shown below to specify the range. ggplot2 is smart that it will limit the view of the x axis that is within reasonable range of the data. Just to be safe we'll use `seq(from = 0, to = 100, by = 5)` to create a vector of numbers from 0 to 100 by 5

> Note! You can also change the y axis scale with a similar function called `scale_y_continuous()`

```{r}
ggplot(df, aes(x = age, fill = infection)) +
  geom_dotplot(binwidth = 1, method = "histodot", binpositions="bygroup")  +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.position = "none") +
  scale_fill_brewer("Infection", palette = "Set1") +
  labs(x = "Age") +
  facet_grid(. ~ infection) +
  scale_x_continuous(breaks = seq(0,100, 5))
```

## Another perspective with dotplots (Vertical bins)

> What if we want to compare the distribution of Infection (No vs Yes) side by side ? We will need to map the infection variable to the x axis and move the age variable to the y axis. We'll also keep the infection variable with the `fill` argument that way a separate color will be used for infection = No and infection = Yes

```{r}
ggplot(df, aes(y = age, x = infection, fill = infection))
```

> Now we have the basis of the plot, we can add the dotplot geom once again, except we'll bin the histodots on the y axis instead of x and keep the stack aligned to the center. We can do this using the `binaxis` argument specifying it on the y axis and we want the stacks within the center

```{r}
ggplot(df, aes(y = age, x = infection, fill = infection)) +
  geom_dotplot(binaxis = "y", stackdir = "center",
               binwidth = 1, method = "histodot")
```

> Now let's add some descriptive indicators on the plot via the `stat_summary()` function. Let's add an indicator of the medians for both the non infection group and the infection group. `stat_summary()` allows us to map a function to the y axis. We will use the `median` function to accomplish this, and use the geom crossbar to visualize the measure.

```{r}
ggplot(df, aes(y = age, x = infection, fill = infection)) +
  geom_dotplot(binaxis = "y", stackdir = "center",
               binwidth = 1, method = "histodot") +
  stat_summary(fun.y = median, fun.ymin = median, fun.ymax = median, geom = "crossbar", width = 0.5)
```

> Let's finish cleaning up the plot with some of the other functions we have learned

```{r}

# manually calculate the median age by infection group

ggplot(df, aes(y = age, x = infection, fill = infection)) +
  geom_dotplot(binaxis = "y", stackdir = "center",
               binwidth = 1, method = "histodot") +
  stat_summary(fun.y = median, fun.ymin = median, fun.ymax = median, geom = "crossbar", width = 0.3) +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid = element_blank()) +
  scale_fill_brewer("infection", palette = "Set1") +
  labs(y = "Age", x = "Infection", title = 'Distribution of Age Stratified by Infection') +
  scale_y_continuous(breaks = seq(0,100, 10))
```

# Saving the plot we just made

> Now that we're happy with the plot we just made, we should save it so we can share it with our collaborators.  There are we can do this by invoking the `ggsave()` function. By default `ggsave()` will save the last plot that was rendered, however we can also specify the plot we would like to save as well.

> The command for `ggsave()` is `ggsave(filename = NULL, plot = last_plot(), ...)`. Please see the documentation for further details using `?ggsave`, for other possible arguments to configure.

```{r, eval=F}
ggsave('my_first_plot.png', height = 6, width = 8)
```

> This function will save the previous plot, in your project directory as my_first_plot.png, with a height of 6 inches, and a width of 8 inches.

# Histogram plots

> We start off with the same base template of ggplot2, by assigning ggplot2 the 2 initial requirements for a plot. The name of the dataframe and a mapping for the coordinate within the aesthetic.

```{r}
ggplot(df, aes(x = age))
```

> Next we move forward with stating the name of the geom we want to use, let's try out the histogram geom called `geom_histogram()`. This is the basic foundation for all plots with ggplot2. The initial function `ggplot()` with the addition of visualization geoms we add layer by layer. Please feel free to experiment with additional geoms, however we will probably not have time to go through all of them.

```{r}
ggplot(df, aes(x = age)) + geom_histogram()
```

> Huzzah! We have a histogram of age, a method of visualizing the distribution of age. Lets follow the same idea of the dotplot by changing the width of the columns of our histogram. `geom_histogram` also has the same argument called `binwidth` which allows us to make that change. `binwidth = 5` allows us to change the width of the bins (columns) to every 5 years of age. We can also better visualize this by changing the scale on the x axis with `scale_x_continuous()`

```{r}
ggplot(df, aes(x = age)) +
  geom_histogram(binwidth = 5) +
  scale_x_continuous(breaks = seq(0,100,5))
```

> Lets add a theme

```{r}
ggplot(df, aes(x = age)) +
  geom_histogram(binwidth = 5) +
  scale_x_continuous(breaks = seq(0,100,5)) +
  theme_bw()
```

> The histogram also has the ability to show the density on the y axis instead of counts. We can do this by specifying the mapping within the `aes()` function by using `y = after_stat(density)`

```{r}
ggplot(df, aes(x = age, y = after_stat(density))) +
  geom_histogram(binwidth = 5) +
  scale_x_continuous(breaks = seq(0,100,5)) +
  theme_bw()
```

> We can add colors by mapping the fill aesthetic with our variable infection

```{r}
ggplot(df, aes(x = age, fill = infection)) +
  geom_histogram(binwidth = 5) +
  theme_bw()
```

> Changing the axis and scale titles

```{r}
ggplot(df, aes(x = age, fill = infection)) +
  geom_histogram(binwidth = 5)  +
  theme_bw() +
  scale_fill_discrete("Infection") +
  labs(x = "Age", y = "Density")

```

> Changing the colors by utilizing a palette

```{r}
ggplot(df, aes(x = age, fill = infection)) +
  geom_histogram(binwidth = 5)  +
  theme_bw() +
  scale_fill_brewer("Infection", palette = "Set1") +
  labs(x = "Age", y = "Density")
```

> Using different panels or 'facets'

```{r}
ggplot(df, aes(x = age, fill = infection)) +
  geom_histogram(binwidth = 5)  +
  theme_bw() +
  scale_fill_brewer("Infection", palette = "Set1") +
  labs(x = "Age", y = 'Count') +
  facet_grid(infection ~ .)

```

## Removing the legend and adding both the variable name and levels on the facet 'strips'

```{r}
ggplot(df, aes(x = age, fill = infection)) +
  geom_histogram(binwidth = 5)  +
  theme_bw() +
  scale_fill_brewer("infection", palette = "Set1") +
  labs(x = "Age", y = 'Count') +
  facet_grid(infection ~ ., labeller = label_both) +
  theme(legend.position = "none")

```

## Let's add an extra dimension
```{r}
ggplot(df, aes(x = age, fill = infection)) +
  geom_histogram(binwidth = 5)  +
  theme_bw() +
  scale_fill_brewer("infection", palette = "Set1") +
  labs(x = "Age", y = 'Count') +
  facet_grid(infection ~ death, labeller = label_both) +
  theme(legend.position = "none")

```

## Let's add even more dimensions
```{r}
ggplot(df, aes(x = age, fill = gender)) +
  geom_histogram(binwidth = 5)  +
  theme_bw() +
  scale_fill_brewer("Gender", palette = "Set1") +
  labs(x = "Age", y = 'Count') +
  facet_grid(infection ~ death, labeller = label_both)
```

## Even more dimensions
```{r}
ggplot(df, aes(x = age, fill = gender)) +
  geom_histogram(binwidth = 5)  +
  theme_bw() +
  scale_fill_brewer("Gender", palette = "Set1") +
  labs(x = "Age", y = 'Count') +
  facet_grid(infection ~ death + encephalopathy, labeller = label_both)
```

# Boxplots

> Create the basis of the plot by including the dataframe and mapping the age onto the y axis.

```{r, include = T}
ggplot(df, aes(y = age))
```

## We add `geom_boxplot()` to create the basic boxplot

```{r, include = T}
ggplot(df, aes(y = age, x = NA)) +
  geom_boxplot()
```

## Adding an additional layer to overlay the boxplot

> We can add an error bar by adding `stat_boxplot()` with `geom = "errorbar"`. This gives us the traditional 'box and whisker box plot`.

> Of note, we need to add the `stat_boxplot()` function before the geom_boxplot. Remember, we are building plots layer by layer. We want the `stat_boxplot()` layer first, so we can overlay the `geom_boxpplot()` function over it the first layer. Experiment with the order of the layers to get the plot to how you want it.

```{r, include = T}
ggplot(df, aes(y = age, x = NA)) +
  stat_boxplot(geom = "errorbar", width = 0.1) +
  geom_boxplot()
```

## Adding a theme

```{r, include = T}
ggplot(df, aes(y = age, x = NA)) +
  stat_boxplot(geom = "errorbar", width = 0.1) +
  geom_boxplot() +
  theme_bw()
```

## Remove the x axis title and text as it doesn't make sense for a single box plot

```{r, include = T}
ggplot(df, aes(y = age, x = NA)) +
  stat_boxplot(geom = "errorbar", width = 0.1) +
  geom_boxplot() +
  theme_bw() +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank())
```

## Stratified boxplots by a factor

> We can also add a fill aesthetic by infection to separate the boxplot into no infection and yes infection. To do this we will also need to map the infection variable to the x axis. I've also added the fill argument, so we can have separate colors for No and Yes.

```{r, include = T}
ggplot(df, aes(y = age, x = infection, fill = infection)) +
  stat_boxplot(geom = "errorbar", width = 0.1) +
  geom_boxplot() +
  theme_bw()

```

> We can further clean up the plot by changing the axis title and legend title

```{r}
ggplot(df, aes(y = age, x = infection, fill = infection)) +
  stat_boxplot(geom = "errorbar", width = 0.1) +
  geom_boxplot() +
  theme_bw() +
  scale_fill_discrete('Infection') +
  labs(x = "Infection", y = "Age")
```

## Change the colors by using a palette

```{r}
ggplot(df, aes(y = age, x = infection, fill = infection)) +
  stat_boxplot(geom = "errorbar", width = 0.1) +
  geom_boxplot() +
  theme_bw() +
  scale_fill_brewer("infection", palette = "Set1") +
  labs(x = "Infection", y = "Age")
```

## Removing the legend within the `theme()` function

```{r}
ggplot(df, aes(y = age, x = infection, fill = infection)) +
  stat_boxplot(geom = "errorbar", width = 0.1) +
  geom_boxplot() +
  theme_bw() +
  scale_fill_brewer("infection", palette = "Set1") +
  labs(x = "Infection", y = "Age") +
  theme(legend.position = "none")
```

## Overlaying an additional geom (scatter)

> Going back to the grammar of graphics, we are iteratively adding additional layers to the plot. We can also add a scatter of the points on top of the boxplot to further visualize the distribution of age by infection. We can do this by adding another geom after `geom_boxplot()` called `geom_point()`. The `width = .1` argument controls the amount of jitter. Feel free to change the jitter amount to your liking.

```{r}
ggplot(df, aes(y = age, x = infection, fill = infection)) +
  stat_boxplot(geom = "errorbar", width = 0.1) +
  geom_boxplot() +
  geom_jitter(width = .1) +
  theme_bw() +
  scale_fill_brewer("infection", palette = "Set1") +
  labs(x = "Infection", y = "Age") +
  theme(legend.position = "none")
```

> `geom_boxplot()` already shows points but only for outliers. However adding `geom_jitter()` we're already showing the points. We can remove the duplicate outliers by adding the `outlier.shape = NA` argument within the boxplot geom

```{r}
ggplot(df, aes(y = age, x = infection, fill = infection)) +
  stat_boxplot(geom = "errorbar", width = 0.1) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = .1) +
  theme_bw() +
  scale_fill_brewer("infection", palette = "Set1") +
  labs(x = "Infection", y = "Age") +
  theme(legend.position = "none")
```

## Mapping a color to a specific layer

> What if we want to map an additional color to a specific layer (specicifically to the scatter points). We can do this by adding `aes()` to the specific layer `geom_jitter()` and mapping the color to gender. This way we can visualize Male and Females on the `geom_jitter()` layer as well as have a color betwee infection Yes and infection No.Since we're adding an additional color layer, we will probably need to return the legend. Let's place the legend on the top left corner within the plot.

```{r}
ggplot(df, aes(y = age, x = infection, fill = infection)) +
  stat_boxplot(geom = "errorbar", width = 0.1) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = .1, aes(color = gender)) +
  theme_bw() +
  scale_fill_brewer("infection", palette = "Set1") +
  labs(x = "Infection", y = "Age") +
  theme(legend.position = 'bottom')
```

> Now that we have gender visualized, what if we want to change the colors for the scatter layer? We can do this by using the `scale_color_brewer()`. Note 'color' for the 'color' argument and 'fill' for the 'fill` argument.

```{r}
ggplot(df, aes(y = age, x = infection, fill = infection)) +
  stat_boxplot(geom = "errorbar", width = 0.1) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = .1, aes(color = gender)) +
  theme_bw() +
  scale_fill_brewer("Infection", palette = "Set1") +
  labs(x = "Infection", y = "Age") +
  theme(legend.position = 'bottom') +
  scale_color_brewer('Gender', palette = "Set2")
```


# Barplots

## Creating a table of statistics to plot

> We start by creating a table of the statistic we want to show, for example lets create a table of the count and percent of child stratified by infection. Recall we can pipe the dataframe `df` and group them by the two discrete (factors) child, and infection. We will then use `summarise()` along with the function `n()` to obtain its count. Next we will use the `filter()` function to remove the missing observations by specifying a logical statement `!is.na()` (the ! indicates NOT - read NOT is na), and then use `mutate()` to create a new column with the percent. We obtain the percent by dividing the `n` column by its sum of the group with the function `sum(n)`.


```{r}

plot_data <- df %>%
  group_by(., child, infection) %>%
  summarise(n = n()) %>%
  filter(., !is.na(child)) %>%
  group_by(., child) %>%
  mutate(., percent = n / sum(n))

plot_data

```

## Maping the dataframe into ggplot and adding the `geom_col()` statistics

```{r}
ggplot(plot_data, aes(x = child, y = n)) +
  geom_col()
```

## Adding a theme

```{r}
ggplot(plot_data, aes(x = child, y = n)) +
  geom_col() +
  theme_bw()
```

## Changing the labels

```{r}
ggplot(plot_data, aes(x = child, y = n)) +
  geom_col() +
  theme_bw() +
  labs(y = "Frequency")
```

## Stratifying with a color

```{r}
ggplot(plot_data, aes(x = child, y = n, fill = infection)) +
  geom_col() +
  theme_bw() +
  scale_fill_discrete('Infection')
```

## Changing the position of the barplot

```{r}
ggplot(plot_data, aes(x = child, y = n, fill = infection)) +
  theme_bw() +
  geom_col(position = position_dodge(width = 1)) +
  labs(y = "Frequency", x = 'Child') +
  scale_fill_discrete('Infection')
```

## Changing the color pallete

```{r}
ggplot(plot_data, aes(x = child, y = percent, fill = infection)) +
  theme_bw() +
  geom_col(position = position_dodge(width = 1)) +
  labs(y = "%", x = 'Child') +
  scale_fill_brewer('Infection', palette = 'Set2')
```

## Making the scales into percents

```{r}
ggplot(plot_data, aes(x = child, y = percent, fill = infection)) +
  theme_bw() +
  geom_col(position = position_dodge(width = 1)) +
  labs(y = "%", x = 'Child') +
  scale_fill_brewer('Infection', palette = 'Set2') +
  scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1))
```

## Adding a text overlay of the percent

```{r}
ggplot(plot_data, aes(x = child, y = percent, fill = infection)) +
  theme_bw() +
  geom_col(position = position_dodge(width = 1)) +
  labs(y = "%", x = 'Child') +
  scale_fill_brewer('Infection', palette = 'Set2') +
  scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1)) +
  geom_text(aes(y = percent, label = percent))
```

### Cleaning up the text

```{r}
ggplot(plot_data, aes(x = child, y = percent, fill = infection)) +
  theme_bw() +
  geom_col(position = position_dodge(width = 1)) +
  labs(y = "%", x = 'Child') +
  scale_fill_brewer('Infection', palette = 'Set2') +
  scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1)) +
  geom_text(aes(y = percent, label = percent), position = position_dodge(width = 1))
```

## Rounding the percent and adding a percent symbol

```{r}
ggplot(plot_data, aes(x = child, y = percent, fill = infection)) +
  theme_bw() +
  geom_col(position = position_dodge(width = 1)) +
  labs(y = "%", x = 'Child') +
  scale_fill_brewer('Infection', palette = 'Set2') +
  scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1)) +
  geom_text(aes(y = percent + .02, label = paste0(round(percent*100, 0), '%')), position = position_dodge(width = 1))
```

## Adding the count as a label

```{r}
ggplot(plot_data, aes(x = child, y = percent, fill = infection)) +
  theme_bw() +
  geom_col(position = position_dodge(width = 1)) +
  labs(y = "%", x = 'Child') +
  scale_fill_brewer('Infection', palette = 'Set2') +
  scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1)) +
  geom_text(aes(y = percent + .02, label = paste0(round(percent*100, 0), '%')), position = position_dodge(width = 1)) +
  geom_text(aes(y = percent/2, label = n), position = position_dodge(width = 1), color = 'white') +
  theme(legend.position = c(.9, .85),
        panel.grid = element_blank())
```

## How NOT to use Barplots

> This is an example of an improper use of barplots commonly found in many publications. The barplots illustrates the mean age stratified by infection. The errorbar represents the sd of the mean.

```{r}
plot_data <- df %>%
  group_by(., infection) %>%
  summarise(., mean = mean(age), sd = sd(age))

ggplot(plot_data, aes(x = infection, y = mean, fill = infection)) +
  geom_errorbar(aes(ymin = mean, ymax = mean + sd), width = .1) +
  geom_bar(position = position_dodge(), stat = "identity") +
  scale_fill_brewer("infection", palette = "Set1") +
  theme_bw() + labs(x = "infection", y = "age") +
  theme(legend.position = "none")
```


# Arranging Plots together

> Now that we have constructed the multitude of plots, we would commonly want to present certain plots together to illustrate a certain point in our manuscript. We start by saving each plot we would like to present together as an object in R using the `<-` to assign the plot to an object name.

```{r}

plot_data <- df %>%
  group_by(., child, infection) %>%
  summarise(n = n()) %>%
  na.omit() %>%
  group_by(., child) %>%
  mutate(., percent = n / sum(n))

p1 <- ggplot(plot_data, aes(x = child, y = percent, fill = infection)) +
  theme_bw() +
  geom_bar(stat = 'identity', position = position_dodge2()) +
  labs(y = "%", x = 'Child') +
  scale_fill_brewer('Infection', palette = 'Set1') +
  scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1)) +
  geom_text(aes(y = percent, label = paste0(round(percent*100, 0), '%')), position = position_dodge2(.9), vjust = -.5) +
  geom_text(aes(y = percent/2, label = n), position = position_dodge2(.9), color = 'white') +
  theme(legend.position = c(.9, .85),
        panel.grid = element_blank())

p2 <- ggplot(df, aes(y = age, x = infection, fill = infection)) +
  stat_boxplot(geom = "errorbar", width = 0.1) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = .1, aes(color = gender)) +
  theme_bw() +
  scale_fill_brewer("Infection", palette = "Set1", guide = F) +
  scale_color_discrete('Gender') +
  labs(x = "Infection", y = "Age") +
  theme(legend.position = c(.85, .15), panel.grid = element_blank())

p3 <- ggplot(df, aes(x = age, fill = infection)) +
  geom_histogram(binwidth = 5)  +
  theme_bw() +
  scale_fill_brewer("infection", palette = "Set1") +
  labs(x = "Age", y = 'Count') +
  facet_grid(infection ~ death, labeller = label_both) +
  theme(legend.position = "none", panel.grid = element_blank())

p4 <- ggplot(df, aes(y = age, x = infection, fill = infection)) +
  geom_dotplot(binaxis = "y", stackdir = "center",
               binwidth = 1, method = "histodot") +
  stat_summary(fun.y = median, fun.ymin = median, fun.ymax = median, geom = "crossbar", width = 0.3) +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid = element_blank()) +
  scale_fill_brewer("Infection", palette = "Set1") +
  labs(y = "Age", x = "Infection") +
  scale_y_continuous(breaks = seq(0,100, 10))

```

> Now that we have saved the plots as R objects, we can view the plots by simply running the object names.

```{r}
p1

p2

p3

p4
```

> To arrange the plots together, we can utilize a helpful function from the package `patchwork`. If you don't have `patchwork` installed, please install it using `install.packages('patchwork')` and loading the package with `library(patchwork)`. The syntax for arranging plots is performed by using the `|` bar syntax and the `/` forward slash syntax. The `|` allows us to arrange the plots left and right, and the `/` allows us to arrange the plots above and below.

```{r, fig.height=10, fig.width=14}
# library(patchwork)
# install.packages('patchwork')

pg <- (p1 | p2) / (p3 | p4) + 
  plot_annotation(tag_levels = 'A')

pg


```

> If you would like to save your 'merged' plot grid, then you will need to save this new grid into a object. In this example, the plot is saved into an object called `pg`. We would then save this plot using the `ggsave()` function.

```{verbatim}
ggsave('merged_plot.png', pg, height = 10, width = 14)
```


<!-- # Profile Plot -->

<!-- > We start by loading the vaccine dataset, in this case I'm reading in the data into the object name df2 -->

<!-- ```{r} -->
<!-- df2 <- read_csv('data/vaccine.csv') %>% janitor::clean_names() -->
<!-- ``` -->

<!-- > I'm using the function `head()` as a method of quickly viewing the first couple lines of the dataset -->

<!-- ```{r} -->
<!-- head(df2) -->
<!-- ``` -->

<!-- ## Glimpse of our dataset -->

<!-- > Glimpse allows us to take a quick 'glimpse' of what's in our data. We have 40 observations and 10 variables. This also allows us to see the type for each of the variables -->

<!-- ```{r} -->
<!-- glimpse(df2) -->
<!-- ``` -->

<!-- ## Recoding Experiment and Group -->

<!-- > Since Experiment and Group is not a factor - we can recode the variables into factor using the `factor()` function. -->

<!-- ```{r} -->

<!-- df2 <- df2 %>% -->
<!--   mutate( -->
<!--     experiment = factor(experiment, levels = 1:2, labels = c('Experiment 1', 'Experiment 2')), -->
<!--     group = factor(group) -->
<!--   ) -->

<!-- ``` -->

<!-- ## Verify Experiment and Group is properly recoded -->

<!-- > I'm using glimpse again to verify the correct variable type -->

<!-- ```{r} -->
<!-- glimpse(df2) -->
<!-- ``` -->

<!-- ## Pivot the data -->

<!-- ```{r} -->
<!-- temp <- df2 %>% -->
<!--   pivot_longer(., t0:t21, names_to = 'time', values_to = 'value') -->
<!-- ``` -->

<!-- > The dataframe is in a 'wide' format, and we would like to reformat it to a 'long' format. We see that multiple columns in our dataframe is describing the same type of variable (time), and we would like to 'pivot' them together into a single column 'time'. The values for each of the time point will be placed into a column called 'value'.  t0:t21 indicates the column positions that I would like to pivot, where I'm saying gather columns t0 to t21. We can also explicitly use column names instead i.e t0, t3, t7, etc. Last i'm saving the output to a new object called temp, (dataframe used for plotting). This is good practice because we don't want to replace our main data. If we make a mistake we can rerun the code once more to create a new 'temp'. -->

<!-- ## Verify the data is correct -->
<!-- ```{r} -->
<!-- head(temp) -->
<!-- ``` -->

<!-- > I'm running `head()` on the data once more to verify the data is correctly recoded -->

<!-- ## Recode the time variable -->

<!-- ```{r} -->
<!-- temp <- temp %>% -->
<!--   mutate( -->
<!--     time = factor(time, levels = c('t0', 't3', 't7', 't10', 't14', 't17', 't21')) -->
<!--   ) -->

<!-- ``` -->

<!-- ## Plot -->
<!-- ```{r} -->
<!-- ggplot(temp, aes(x=time, y = value, fill = group)) + -->
<!--   geom_boxplot() + -->
<!--   theme_bw() + -->
<!--   theme(panel.grid = element_blank()) + -->
<!--   facet_grid(experiment~.) -->
<!-- ``` -->

<!-- > This approach uses the geom_boxplot. It's a bit easier, as `geom_boxplot()` will do all of the calculations for median and iqr for you. We can create this by utilizing `geom_boxplot()`, once we assigned the x and y variables to the `aes()`. The `fill = group` is necessary as it stratifies and colorizes the different groups. If we don't specify a fill, then ggplot will assume all of the values are from the same group. -->

<!-- ## Another approach -->
<!-- ```{r} -->
<!-- se <- function(x) sqrt(var(x)/length(x)) -->

<!-- df2 %>% -->
<!--   pivot_longer(., t0:t21, names_to = 'time', values_to = 'value') %>% -->
<!--   group_by(., experiment, group, time) %>% -->
<!--   summarise(., mean = mean(value), se = se(value)) %>% -->
<!--   mutate(., time = factor(time, levels = c('t0', 't3', 't7', 't10', 't14', 't17', 't21'))) %>% -->
<!--   ggplot(., aes(x=time, y=mean, color = group)) + -->
<!--   geom_point() + -->
<!--   geom_line(aes(group = group, linetype = group)) + -->
<!--   geom_errorbar(aes(ymin = mean - se, ymax = mean + se), width = .2) + -->
<!--   facet_grid(experiment~.) + -->
<!--   theme_bw() + -->
<!--   theme(panel.grid = element_blank(), legend.position = 'bottom', legend.title = element_blank()) + -->
<!--   labs(x='Time Point', y = 'Tumor Volume') -->
<!-- ``` -->

<!-- > This is another approach of accomplishing much of the same thing except in a single chunk of code using pipes. Instead of plotting the median and IQR from boxplots, we're plotting grouped means of every timepoint within each group and experiment. We're also using the `geom_errorbar()` to add error bars depicting the standard errors, as well as a line to visualize the trends. -->

<!-- > There's alot of code in there, however try to parse it out line by line to see what outputs gets passed into the next line. -->

# References/Resources

[R for Data Science](http://r4ds.had.co.nz/)

[Tidyverse Homepage](https://www.tidyverse.org/)

[ggplot2 Cheatsheet](https://github.com/rstudio/cheatsheets/raw/master/data-visualization-2.1.pdf)

[R Studio Cheatsheets](https://www.rstudio.com/resources/cheatsheets/)

# Session Info
```{r}
sessionInfo()
```
